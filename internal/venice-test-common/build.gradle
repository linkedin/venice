import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.nio.file.StandardOpenOption


apply {
  plugin 'me.champeau.jmh'
}

jmh {
  fork = 3
  warmupForks = 1
  iterations = 10
  warmupIterations = 5
  timeUnit = 'ns'
  resultFormat = 'json'
  failOnError = true
  includeTests = false
  profilers = ['gc']
  benchmarkMode = ['sample']
  includes = ['DaVinciClientBenchmark']
  jvmArgs = ['-Xms4G', '-Xmx4G', '-Djmh.shutdownTimeout=0', '-Djmh.shutdownTimeout.step=0']
}

jmhJar {
  zip64 = true
}

configurations {
  all {
    resolutionStrategy {
      force libraries.kafka
      force libraries.javax
    }
  }
  implementation {
    exclude group: 'org.mortbay.jetty', module: 'servlet-api'
  }
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestUtils
}

sourceSets {
  integrationTest {
    // 'src/integrationTest/java' is in srcDir by default. Just add the proto directory
    java.srcDir 'src/integrationTest/proto'
    resources
  }
  jmh {
    // 'src/jmh/java' is in srcDir by default. Just add the proto directory
    java.srcDir 'src/jmh/proto'
    resources
  }
}

dependencies {
  implementation (libraries.d2) {
    exclude group: 'com.oracle', module: 'ojdbc14' // unused transitive dependencies, doesn't exist in repo
    // this will introduce another different mockito-all version
    exclude group: 'org.mockito', module: 'mockito-all'
  }
  implementation project(':clients:da-vinci-client')
  implementation project(':clients:venice-client')
  implementation project(':clients:venice-push-job')
  implementation project(':internal:venice-common')
  implementation project(':services:venice-controller')
  implementation project(':services:venice-router')
  implementation project(':integrations:venice-samza')
  implementation project(':clients:venice-producer')
  implementation project(':internal:venice-client-common')
  implementation project(':services:venice-server')
  implementation project(':clients:venice-thin-client')
  implementation project(':internal:alpini:netty4:alpini-netty4-base')
  implementation project(':internal:alpini:router:alpini-router-api')
  implementation project(':internal:alpini:router:alpini-router-base')

  implementation('org.apache.helix:helix-core:1.4.1:jdk8') {
    exclude group: 'org.apache.helix'
  }
  implementation('org.apache.helix:helix-common:1.4.1:jdk8')  {
    exclude group: 'org.apache.helix'
  }
  implementation('org.apache.helix:zookeeper-api:1.4.1:jdk8') {
    exclude group: 'org.apache.helix'
  }
  implementation('org.apache.helix:metadata-store-directory-common:1.4.1:jdk8') {
    exclude group: 'org.apache.helix'
  }
  implementation('org.apache.helix:metrics-common:1.4.1:jdk8')

  implementation libraries.avroUtilCompatHelper
  implementation libraries.avroUtilFastserde
  implementation libraries.commonsCli
  implementation libraries.conscrypt
  implementation libraries.fastUtil
  implementation (libraries.hadoopCommon) {
    exclude group: 'javax.servlet'
  }
  implementation libraries.httpAsyncClient
  implementation libraries.javax
  implementation libraries.kafka
  implementation libraries.kafkaClients
  implementation libraries.kafkaClientsTest
  implementation libraries.mockito
  implementation libraries.rocksdbjni
  implementation libraries.samzaApi
  implementation libraries.spark
  implementation libraries.testng
  implementation libraries.zstd
  implementation libraries.openTelemetryTestSdk

  implementation (libraries.mapreduceClientJobClient) {
    exclude group: 'org.apache.avro'
    exclude group: 'javax.servlet'
  }
  testImplementation project(':clients:venice-admin-tool')
  testImplementation project(':internal:alpini:common:alpini-common-base')
  testImplementation project(':internal:venice-common').sourceSets.test.output
  testImplementation libraries.log4j2core
  testImplementation libraries.log4j2api
  testImplementation libraries.kafkaClients

  jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:' + jmh.jmhVersion.get()
  jmhImplementation project(path: ':internal:venice-test-common', configuration: 'integrationTestUtils')
}

def integrationTestConfigs = {
  mustRunAfter test
  classpath = sourceSets.integrationTest.runtimeClasspath
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  forkEvery = Integer.parseInt(project.properties.get('integrationTest.forkEvery', "$forkEvery"))
  maxParallelForks = Integer.parseInt(project.properties.get('integrationTest.maxParallelForks', "$maxParallelForks"))
}

def integrationTestBuckets = [
    "1": [
        "com.linkedin.venice.endToEnd.PartialUpdateWithHeartbeatReadyToServeCheckTest"
    ],
    "2": [
        "com.linkedin.venice.endToEnd.PartialUpdateTest"
    ],
    "3": [
        "com.linkedin.venice.endToEnd.PartialUpdateWithParallelProcessingTest",
        "com.linkedin.venice.client.store.TestD2ServiceDiscovery"
    ],
    "4": [
        "com.linkedin.venice.endToEnd.TestDeferredVersionSwap",
        "com.linkedin.venice.helix.ZkRoutersClusterManagerTest",
        "com.linkedin.venice.pubsub.adapter.kafka.consumer.ApacheKafkaConsumerTest",
        "com.linkedin.venice.helix.TestHelixReadOnlyZKSharedSystemStoreRepository"
    ],
    "5": [
        "com.linkedin.venice.endToEnd.DaVinciClientSubscribeTest",
        "com.linkedin.venice.endToEnd.DaVinciClientRecordTransformerTest",
        "com.linkedin.venice.router.TestRouterAsyncStart"
    ],
    "6": [
        "com.linkedin.venice.endToEnd.DaVinciClientP2PBlobTransferTest",
        "com.linkedin.venice.controller.VeniceParentHelixAdminTest",
        "com.linkedin.venice.controller.TestParentControllerWithMultiDataCenter",
        "com.linkedin.venice.integration.utils.SystemExitPrevention"
    ],
    "7": [
        "com.linkedin.venice.endToEnd.PushJobDetailsTest",
        "com.linkedin.venice.endToEnd.DaVinciClientIsolatedAndHybridStoreTest",
        "com.linkedin.venice.consumer.TestChangelogConsumerWithParallelProcessing",
        "com.linkedin.venice.kafka.KafkaConsumptionTest"
    ],
    "8": [
        "com.linkedin.venice.endToEnd.PushStatusStoreTest",
        "com.linkedin.venice.consumer.TestChangelogConsumer",
        "com.linkedin.venice.endToEnd.TestPushJobWithNativeReplication",
        "com.linkedin.venice.zk.TestMigrateVeniceZKPaths"
    ],
    "9": [
        "com.linkedin.venice.endToEnd.TestDeferredVersionSwapWithFailingRegions",
        "com.linkedin.venice.endToEnd.TestStoreMigration",
        "com.linkedin.venice.controller.TestVeniceHelixAdminWithIsolatedEnvironment",
        "com.linkedin.venice.helix.TestHelixExternalViewRepository",
        "com.linkedin.venice.fastclient.BatchGetAvroStoreClientTest"
    ],
    "10": [
        "com.linkedin.venice.endToEnd.TestHybridQuota",
        "com.linkedin.venice.endToEnd.TestAdminOperationWithPreviousVersion",
        "com.linkedin.venice.endToEnd.ActiveActiveReplicationForHybridTest",
        "com.linkedin.venice.endToEnd.TestMultiDataCenterAdminOperations",
        "com.linkedin.venice.router.api.TestHostFinder"
    ],
    "11": [
        "com.linkedin.venice.endToEnd.DaVinciClientMemoryLimitTest",
        "com.linkedin.venice.endToEnd.TestHybrid",
        "com.linkedin.venice.controller.server.TestAdminSparkServer",
        "com.linkedin.venice.controller.TestDelayedRebalance",
        "com.linkedin.venice.client.store.TestSslTransportClient",
        "com.linkedin.venice.helix.TestHelixReadOnlyStoreRepositoryAdapter"
    ],
    "12": [
        "com.linkedin.venice.endToEnd.DaVinciClientTest",
        "com.linkedin.venice.endToEnd.TestBatchForRocksDB",
        "com.linkedin.venice.controller.TestHAASController",
        "com.linkedin.venice.server.VeniceServerTest",
        "com.linkedin.venice.endToEnd.TestTopicWiseSharedConsumerPoolResilience"
    ],
    "13": [
        "com.linkedin.venice.endToEnd.DaVinciComputeTest",
        "com.linkedin.venice.endToEnd.TestMaterializedViewEndToEnd",
        "com.linkedin.venice.endToEnd.TestActiveActiveIngestion",
        "com.linkedin.venice.endToEnd.TestActiveActiveIngestionWithReadWriteLeaderCompactionTuningAndParallelProcessing",
        "com.linkedin.venice.pubsub.api.admin.PubSubAdminAdapterTest",
        "com.linkedin.venice.router.ReplicaFailoverTest",
        "com.linkedin.venice.helix.ZkStoreConfigAccessorTest"
    ],
    "14": [
        "com.linkedin.venice.pubsub.manager.TopicManagerE2ETest",
        "com.linkedin.venice.helixrebalance.LeaderFollowerThreadPoolTest",
        "com.linkedin.venice.ingestionHeartbeat.IngestionHeartBeatTest",
        "com.linkedin.venice.endToEnd.TestPartialUpdateWithActiveActiveReplication",
        "com.linkedin.venice.controller.kafka.consumer.AdminConsumptionTaskIntegrationTest",
        "com.linkedin.venice.helix.TestHelixReadOnlyStorageEngineRepository",
        "com.linkedin.venice.helix.TestHelixReadWriteStorageEngineRepository"
    ],
    "15": [
        "com.linkedin.venice.endToEnd.DaVinciClusterAgnosticTest",
        "com.linkedin.venice.controllerapi.TestControllerClient",
        "com.linkedin.venice.pubsub.api.consumer.PubSubConsumerAdapterTest",
        "com.linkedin.venice.endToEnd.TestActiveActiveReplicationForIncPush",
        "com.linkedin.venice.controller.TestHybridStoreRepartitioningWithMultiDataCenter",
        "com.linkedin.venice.endToEnd.TestStoreMigrationMultiRegion",
        "com.linkedin.venice.restart.TestRestartServerAfterDeletingSstFilesWithActiveActiveIngestion",
        "com.linkedin.venice.endToEnd.MetaSystemStoreTest",
        "com.linkedin.venice.helix.StoragePersonaRepositoryTest",
        "com.linkedin.venice.pubsub.adapter.kafka.producer.ApacheKafkaProducerAdapterITest"
    ],
    "16": [
        "com.linkedin.venice.endToEnd.BlobP2PTransferAmongServersTest",
        "com.linkedin.venice.endToEnd.TestDaVinciRequestBasedMetaRepository",
        "com.linkedin.venice.endToEnd.TestStoreUpdateStoragePersona",
        "com.linkedin.venice.controller.TestInstanceRemovable",
        "com.linkedin.venice.endToEnd.DaVinciLiveUpdateSuppressionTest",
        "com.linkedin.venice.fastclient.AvroStoreClientEndToEndTest",
        "com.linkedin.venice.endToEnd.TestDeferredVersionSwapWithoutTargetedRegionPush",
        "com.linkedin.venice.controller.AdminToolE2ETest",
        "com.linkedin.venice.router.TestStreaming",
        "com.linkedin.venice.endToEnd.TestSeparateRealtimeTopicIngestion",
        "com.linkedin.venice.fastclient.AvroStoreClientZstdEndToEndTest",
        "com.linkedin.venice.persona.StoragePersonaAccessorTest"
    ],
    "17": [
        "com.linkedin.venice.endToEnd.TestProducerBatching",
        "com.linkedin.venice.hadoop.TestVenicePushJob",
        "com.linkedin.venice.router.TestRouterRetry",
        "com.linkedin.venice.endToEnd.TestBatchReportIncrementalPush",
        "com.linkedin.venice.multicluster.TestMetadataOperationInMultiCluster",
        "com.linkedin.venice.endToEnd.TestMultiDatacenterVenicePushJob",
        "com.linkedin.venice.endToEnd.ParticipantStoreTest",
        "com.linkedin.venice.endToEnd.DaVinciClientDiskFullTest",
        "com.linkedin.venice.endToEnd.TestVsonStoreBatch",
        "com.linkedin.venice.restart.TestRestartController",
        "com.linkedin.venice.endToEnd.TestPushJobWithSourceGridFabricSelection",
        "com.linkedin.venice.endToEnd.NearlineE2ELatencyTest",
        "com.linkedin.venice.fastclient.grpc.VeniceGrpcEndToEndTest"
    ],
    "18": [
        "com.linkedin.venice.router.TestBlobDiscovery",
        "com.linkedin.venice.helix.TestHelixCustomizedViewOfflinePushRepository",
        "com.linkedin.venice.restart.TestRestartRouter",
        "com.linkedin.venice.controller.TestEnablingSSLPushInVeniceHelixAdminWithIsolatedEnvironment",
        "com.linkedin.venice.endToEnd.TestWritePathComputation",
        "com.linkedin.venice.endToEnd.TestDumpIngestionContext",
        "com.linkedin.venice.controller.TestAdminToolEndToEnd",
        "com.linkedin.venice.endToEnd.TestPushJobWithEmergencySourceRegionSelection",
        "com.linkedin.venice.controller.TestVeniceHelixAdminWithSharedEnvironment",
        "com.linkedin.venice.endToEnd.TestPushJobVersionCleanup",
        "com.linkedin.venice.controller.TestTopicRequestOnHybridDelete",
        "com.linkedin.venice.endToEnd.TestStaleDataVisibility",
        "com.linkedin.venice.writer.VeniceWriterTest",
        "com.linkedin.venice.endToEnd.OneTouchDataRecoveryTest",
        "com.linkedin.venice.helix.TestHelixStatusMessageChannel",
        "com.linkedin.venice.samza.VeniceSystemFactoryTest",
        "com.linkedin.venice.kafka.EndToEndKafkaWithSASLTest",
        "com.linkedin.venice.router.TestReadForHttpClient5"
    ],
    "19": [
        "com.linkedin.venice.endToEnd.TestActiveActiveReplicationWithDelayedLeaderPromotion",
        "com.linkedin.venice.storagenode.ReadComputeValidationTest",
        "com.linkedin.venice.restart.TestRestartServerWithChecksumVerification",
        "com.linkedin.venice.endToEnd.StoreMetadataRecoveryTest",
        "com.linkedin.venice.controller.TestClusterLevelConfigForNativeReplication",
        "com.linkedin.venice.pubsub.manager.TopicManagerIntegrationTest",
        "com.linkedin.venice.controller.TestTopicRequestOnHybridDeleteWithHMC",
        "com.linkedin.venice.restart.TestRestartServerDuringIngestionForRocksDB",
        "com.linkedin.venice.helix.HelixPartitionPushStatusAccessorTest",
        "com.linkedin.venice.endToEnd.TestHybridMultiRegion",
        "com.linkedin.venice.endToEnd.PartialUpdateClusterConfigTest",
        "com.linkedin.venice.endToEnd.TestStoreBackupVersionDeletion",
        "com.linkedin.venice.kafka.ssl.AdminChannelWithSSLTest",
        "com.linkedin.venice.endToEnd.TestStoreGraveyardCleanupService",
        "com.linkedin.venice.controller.server.TestAdminSparkServerWithMultiServers",
        "com.linkedin.venice.endToEnd.TestUnusedValueSchemaCleanup",
        "com.linkedin.venice.helixrebalance.TestRebalanceByDefaultStrategy",
        "com.linkedin.venice.storagenode.StorageNodeComputeTest",
        "com.linkedin.venice.endToEnd.TestHelixCustomizedView"
    ],
    "20": [
        "com.linkedin.venice.controller.TestClusterLevelConfigForActiveActiveReplication",
        "com.linkedin.venice.helix.TestControllerKMERegistrationFromMessageHeader",
        "com.linkedin.venice.controller.TestAdminOperationVersionDetection",
        "com.linkedin.venice.controller.TestIncrementalPush",
        "com.linkedin.venice.router.TestReadForApacheAsyncClient",
        "com.linkedin.venice.kafka.ssl.TestProduceWithSSL",
        "com.linkedin.venice.storagenode.StorageNodeReadTest",
        "com.linkedin.venice.endToEnd.TestGlobalRtDiv",
        "com.linkedin.venice.consumer.ConsumerIntegrationTestWithSchemaReader",
        "com.linkedin.venice.endToEnd.TestHybridStoreDeletion",
        "com.linkedin.venice.restart.TestRestartServerAfterDeletingSstFiles",
        "com.linkedin.venice.endToEnd.TestBackupVersionDatabaseOptimization",
        "com.linkedin.venice.endToEnd.TestLeaderReplicaFailover",
        "com.linkedin.venice.endToEnd.TestProtocolVersionAutoDetection",
        "com.linkedin.venice.controller.server.TestBackupControllerResponse",
        "com.linkedin.venice.endToEnd.TestSuperSetSchemaRegistration",
        "com.linkedin.venice.endToEnd.TestServerStorePropertiesEndpoint",
        "com.linkedin.davinci.ingestion.IsolatedIngestionServerTest",
        "com.linkedin.venice.controller.TestHolisticSeverHealthCheck",
        "com.linkedin.venice.consumer.ConsumerIntegrationTestWithProtocolHeader",
        "com.linkedin.venice.controller.TestStartMultiControllers",
        "com.linkedin.venice.restart.TestRestartServer",
        "com.linkedin.venice.controller.TestDeleteStoreDeletesRealtimeTopic",
        "com.linkedin.venice.router.TestRouter",
        "com.linkedin.venice.router.TestConnectionWarmingForApacheAsyncClient",
        "com.linkedin.venice.throttle.TestRouterReadQuotaThrottler",
        "com.linkedin.venice.endToEnd.ParentControllerMetadataSystemStoreTest",
        "com.linkedin.venice.router.TestRetryQuotaRejection",
        "com.linkedin.venice.endToEnd.TestRocksDBOffsetStore",
        "com.linkedin.venice.controller.server.TestAdminSparkServerAcl",
        "com.linkedin.venice.storagenode.TestEarlyTermination",
        "com.linkedin.venice.client.store.AvroSpecificStoreClientImplTest",
        "com.linkedin.venice.helix.TestHelixReadWriteStoreRepositoryAdapter"
    ],
    "21": [
        "com.linkedin.venice.endToEnd.StoragePersonaTest",
        "com.linkedin.venice.endToEnd.DataRecoveryTest",
        "com.linkedin.venice.endToEnd.RocksDBPlainTableTest",
        "com.linkedin.venice.endToEnd.TestFatalDataValidationExceptionHandling",
        "com.linkedin.venice.endToEnd.TestControllerGrpcEndpoints",
        "com.linkedin.venice.client.store.AvroGenericStoreClientImplTest",
        "com.linkedin.venice.integration.StorageNodeServiceTest",
        "com.linkedin.venice.helix.TestServerKMERegistrationFromMessageHeader",
        "com.linkedin.venice.controller.TestD2ControllerClient",
        "com.linkedin.venice.controller.TestControllerEnforceSSL",
        "com.linkedin.venice.controller.server.TestAdminSparkServerGetLeader",
        "com.linkedin.venice.helix.TestHelixReadOnlySchemaRepository",
        "com.linkedin.venice.hadoop.input.kafka.TestKafkaInputRecordReader",
        "com.linkedin.venice.helix.TestHelixReadWriteSchemaRepository",
        "com.linkedin.venice.controller.TestVeniceHelixResources",
        "com.linkedin.venice.hadoop.input.kafka.TestKafkaInputFormat",
        "com.linkedin.venice.router.api.TestVeniceDispatcher",
        "com.linkedin.venice.helix.HelixLiveInstanceMonitorIntegrationTest",
        "com.linkedin.venice.router.api.TestRouterHeartbeat",
        "com.linkedin.venice.stats.TestZkClientStatusStats",
        "com.linkedin.venice.helix.ControllerInstanceTagRefresherTest",
        "com.linkedin.venice.helix.HelixOfflinePushMonitorAccessorTest",
        "com.linkedin.venice.controller.server.TestAdminSparkWithMocks",
        "com.linkedin.venice.helix.CachedResourceZKStateListenerTest",
        "com.linkedin.venice.controller.TestControllerSecureGrpcServer",
        "com.linkedin.venice.helix.TestHelixReadOnlyLiveClusterConfigRepository",
        "com.linkedin.venice.helix.HelixStoreGraveyardTest",
        "com.linkedin.venice.helix.TestHelixReadWriteLiveClusterConfigRepository",
        "com.linkedin.venice.helix.ZkAllowlistAccessorTest",
        "com.linkedin.venice.controller.multitaskscheduler.StoreMigrationManagerIntegrationTest",
        "com.linkedin.venice.consumer.ConsumerTest",
        "com.linkedin.venice.controller.TestZkExecutionIdAccessor",
        "com.linkedin.venice.controller.migration.TestMigrationPushStrategyZKAccessor",
        "com.linkedin.venice.helix.StoragePersonaStoreDataListenerTest"
    ],
    "22": [
        "com.linkedin.venice.consumer.BootstrappingChangelogConsumerTest"
    ],
    "23": [
        "com.linkedin.venice.endToEnd.TestEmptyPush",
        "com.linkedin.venice.endToEnd.SystemStoreMultiColoTest",
        "com.linkedin.venice.endToEnd.CheckSumTest",
        "com.linkedin.venice.endToEnd.TestStuckConsumerRepair",
        "com.linkedin.venice.fastclient.FastClientGrpcServerReadQuotaTest",
        "com.linkedin.venice.fastclient.StoreOverloadTest",
        "com.linkedin.venice.fastclient.meta.RequestBasedMetadataIntegrationTest",
        "com.linkedin.venice.fastclient.BatchGetAvroStoreClientZstdTest",
        "com.linkedin.venice.fastclient.BatchGetAvroStoreClientGzipTest",
        "com.linkedin.venice.fastclient.FastClientIndividualFeatureConfigurationTest",
        "com.linkedin.venice.fastclient.FastClientDaVinciClientCompatTest",
        "com.linkedin.venice.fastclient.AvroStoreClientGzipEndToEndTest",
    ],
]

integrationTestBuckets.each { name, patterns ->
  task "integrationTests_${name}" (type: Test) {
    ext {
      suiteStartTime = 0
    }
    filter {
      patterns.each { pattern ->
        includeTestsMatching pattern
      }
    }
    configure integrationTestConfigs
    useTestNG {
      excludeGroups 'flaky'
      listeners = ['com.linkedin.venice.testng.VeniceSuiteListener', 'com.linkedin.venice.testng.VeniceTestListener']
    }
    beforeSuite { descriptor ->
      suiteStartTime = System.currentTimeMillis()
    }
    afterSuite { descriptor, result ->
      if (descriptor.name.startsWith("com.linkedin")) {
        println "Test Suite ${descriptor.name} completed (${result.getResultType()}) in ${(System.currentTimeMillis() - suiteStartTime )/1000} s"
      }
    }
  }
}

task integrationTests_99(type: Test) {
  ext {
    suiteStartTime = 0
  }
  filter {
    integrationTestBuckets.each { name, patterns ->
      patterns.each { pattern ->
        excludeTestsMatching pattern
      }
    }
  }
  beforeSuite { descriptor ->
    suiteStartTime = System.currentTimeMillis()
  }
  configure integrationTestConfigs
  useTestNG {
    excludeGroups 'flaky'
    listeners = ['com.linkedin.venice.testng.VeniceSuiteListener', 'com.linkedin.venice.testng.VeniceTestListener']
  }
  afterSuite { descriptor, result ->
    if (descriptor.name.startsWith("com.linkedin")) {
      println "Test Suite ${descriptor.name} completed (${result.getResultType()}) in ${(System.currentTimeMillis() - suiteStartTime )/1000} s"
    }
  }
}

def getFileContent(String targetDir, String fileName) {
  def file = new File(targetDir, fileName)
  def filePath = Paths.get(file.getPath())
  return new String(Files.readAllBytes(filePath))
}

task generateGHCI() {
  def targetDir = rootDir.getPath() + "/.github/rawWorkflows/"
  def targetFile = new File(targetDir, "VeniceCI-E2ETests.yml")
  def targetFilePath = Paths.get(targetFile.getPath())

  def paramFileContent = getFileContent(targetDir, "gh-ci-parameterized-flow.txt")
  def completionFileContent = getFileContent(targetDir, "gh-ci-completion-flow.txt")

  targetFile.delete()
  targetFile.createNewFile()

  append(targetFilePath, "# Auto-generated file. Do not edit manually!\n#\n")
  append(targetFilePath, "# To alter these flows, edit:\n#\n#     internal/venice-test-common/build.gradle\n#\n")
  append(targetFilePath, "# To regenerate, run:\n#\n#     ./gradlew generateGHCI\n\n")

  append(targetFilePath, "name: E2ETests\n\n")
  append(targetFilePath, "on: [push, pull_request, workflow_dispatch]\n\n")
  append(targetFilePath, "jobs:\n")

  def jobs = []

  def common = "--continue --no-daemon "

  def integTestGradleArgs = common + "-DforkEvery=1 -DmaxParallelForks=1 integrationTests_"
  def integrationTestTimeout = 30 // minutes
  integrationTestBuckets.each { name, patterns ->
    def flowName = "IntegrationTests_" + name
    jobs << flowName
    appendToGHCI(paramFileContent, targetFilePath, flowName, integrationTestTimeout, integTestGradleArgs + name)
  }
  def otherTest = "integrationTests_99"
  appendToGHCI(paramFileContent, targetFilePath, otherTest, integrationTestTimeout, integTestGradleArgs + "99")
  jobs << otherTest

  // define a job that depends others to manage the status check
  appendToGHCI(completionFileContent, targetFilePath, "E2ETestsFailureAlert", 20, "null", jobs)

  def finalDestinationPath = Paths.get(rootDir.getPath() + "/.github/workflows/VeniceCI-E2ETests.yml")
  Files.move(targetFilePath, finalDestinationPath, StandardCopyOption.REPLACE_EXISTING)
}

def appendToGHCI(String paramFileContent, Path targetFilePath, String flowName, int timeOut, String gradleArguments, ArrayList dependency=null) {
  String postProcessing = paramFileContent
      .replace("\$FlowName", flowName)
      .replace("\$TimeOut", Integer.toString(timeOut))
      .replace("\$GradleArguments", gradleArguments)

  if (dependency == null) {
    postProcessing = postProcessing.replace("    needs: \$Dependency\n", "")
  } else {
    postProcessing = postProcessing.replace("\$Dependency", dependency.toString())
  }

  append(targetFilePath, postProcessing)
  append(targetFilePath, "\n")
}

def append(Path targetFilePath, String content) {
  Files.write(targetFilePath, content.getBytes(), StandardOpenOption.APPEND)
}

task integrationTest(type: Test) {
  configure integrationTestConfigs
}
check.dependsOn(integrationTest)

flakyTest {
  classpath += sourceSets.integrationTest.runtimeClasspath
  testClassesDirs += sourceSets.integrationTest.output.classesDirs
}

idea {
  module {
    testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
    testSourceDirs += project.sourceSets.jmh.java.srcDirs

    testResourceDirs += project.sourceSets.integrationTest.resources.srcDirs
  }
}

task integrationTestJar(type: Jar) {
  classifier 'integrationTest'
  from sourceSets.integrationTest.output
}

artifacts {
  integrationTestUtils integrationTestJar
}

ext {
  jacocoCoverageThreshold = 0.00
  diffCoverageThreshold = 0.00
}

publishing {
  publications {
    "${project.name}" (MavenPublication) {
      artifact integrationTestJar
    }
  }
}
