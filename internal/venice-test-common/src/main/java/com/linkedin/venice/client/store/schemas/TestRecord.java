/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.venice.client.store.schemas;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;


@org.apache.avro.specific.AvroGenerated
public class TestRecord extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6240017122554582877L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
      "{\"type\":\"record\",\"name\":\"TestRecord\",\"namespace\":\"com.linkedin.venice.client.store.schemas\",\"fields\":[{\"name\":\"intArray\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"float\"}]}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestRecord> ENCODER = new BinaryMessageEncoder<TestRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestRecord> DECODER = new BinaryMessageDecoder<TestRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TestRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TestRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TestRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TestRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TestRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TestRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TestRecord fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<java.lang.Float> intArray;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestRecord() {
  }

  /**
   * All-args constructor.
   * @param intArray The new value for intArray
   */
  public TestRecord(java.util.List<java.lang.Float> intArray) {
    this.intArray = intArray;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter. Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return intArray;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader. Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        intArray = (java.util.List<java.lang.Float>) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'intArray' field.
   * @return The value of the 'intArray' field.
   */
  public java.util.List<java.lang.Float> getIntArray() {
    return intArray;
  }

  /**
   * Sets the value of the 'intArray' field.
   * @param value the value to set.
   */
  public void setIntArray(java.util.List<java.lang.Float> value) {
    this.intArray = value;
  }

  /**
   * Creates a new TestRecord RecordBuilder.
   * @return A new TestRecord RecordBuilder
   */
  public static com.linkedin.venice.client.store.schemas.TestRecord.Builder newBuilder() {
    return new com.linkedin.venice.client.store.schemas.TestRecord.Builder();
  }

  /**
   * Creates a new TestRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestRecord RecordBuilder
   */
  public static com.linkedin.venice.client.store.schemas.TestRecord.Builder newBuilder(
      com.linkedin.venice.client.store.schemas.TestRecord.Builder other) {
    if (other == null) {
      return new com.linkedin.venice.client.store.schemas.TestRecord.Builder();
    } else {
      return new com.linkedin.venice.client.store.schemas.TestRecord.Builder(other);
    }
  }

  /**
   * Creates a new TestRecord RecordBuilder by copying an existing TestRecord instance.
   * @param other The existing instance to copy.
   * @return A new TestRecord RecordBuilder
   */
  public static com.linkedin.venice.client.store.schemas.TestRecord.Builder newBuilder(
      com.linkedin.venice.client.store.schemas.TestRecord other) {
    if (other == null) {
      return new com.linkedin.venice.client.store.schemas.TestRecord.Builder();
    } else {
      return new com.linkedin.venice.client.store.schemas.TestRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for TestRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestRecord>
      implements org.apache.avro.data.RecordBuilder<TestRecord> {
    private java.util.List<java.lang.Float> intArray;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.linkedin.venice.client.store.schemas.TestRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.intArray)) {
        this.intArray = data().deepCopy(fields()[0].schema(), other.intArray);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing TestRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.linkedin.venice.client.store.schemas.TestRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.intArray)) {
        this.intArray = data().deepCopy(fields()[0].schema(), other.intArray);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'intArray' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getIntArray() {
      return intArray;
    }

    /**
      * Sets the value of the 'intArray' field.
      * @param value The value of 'intArray'.
      * @return This builder.
      */
    public com.linkedin.venice.client.store.schemas.TestRecord.Builder setIntArray(
        java.util.List<java.lang.Float> value) {
      validate(fields()[0], value);
      this.intArray = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'intArray' field has been set.
      * @return True if the 'intArray' field has been set, false otherwise.
      */
    public boolean hasIntArray() {
      return fieldSetFlags()[0];
    }

    /**
      * Clears the value of the 'intArray' field.
      * @return This builder.
      */
    public com.linkedin.venice.client.store.schemas.TestRecord.Builder clearIntArray() {
      intArray = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TestRecord build() {
      try {
        TestRecord record = new TestRecord();
        record.intArray =
            fieldSetFlags()[0] ? this.intArray : (java.util.List<java.lang.Float>) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestRecord> WRITER$ =
      (org.apache.avro.io.DatumWriter<TestRecord>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestRecord> READER$ =
      (org.apache.avro.io.DatumReader<TestRecord>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
    if (this.intArray == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.intArray.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.Float e0: this.intArray) {
        actualSize0++;
        out.startItem();
        out.writeFloat(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException(
            "Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.intArray = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.Float> a0 = this.intArray;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.Float>(
              (int) size0,
              SCHEMA$.getField("intArray").schema().getTypes().get(1));
          this.intArray = a0;
        } else
          a0.clear();
        SpecificData.Array<java.lang.Float> ga0 =
            (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a0 : null);
        for (; 0 < size0; size0 = in.arrayNext()) {
          for (; size0 != 0; size0--) {
            java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readFloat();
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            if (in.readIndex() != 1) {
              in.readNull();
              this.intArray = null;
            } else {
              long size0 = in.readArrayStart();
              java.util.List<java.lang.Float> a0 = this.intArray;
              if (a0 == null) {
                a0 = new SpecificData.Array<java.lang.Float>(
                    (int) size0,
                    SCHEMA$.getField("intArray").schema().getTypes().get(1));
                this.intArray = a0;
              } else
                a0.clear();
              SpecificData.Array<java.lang.Float> ga0 =
                  (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a0 : null);
              for (; 0 < size0; size0 = in.arrayNext()) {
                for (; size0 != 0; size0--) {
                  java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
                  e0 = in.readFloat();
                  a0.add(e0);
                }
              }
            }
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}
