import io.netifi.flatbuffers.plugin.tasks.FlatBuffers

plugins {
  id "io.netifi.flatbuffers" version "1.0.6"
}

task createFlatBuffers(type: FlatBuffers) {
  inputDir = file("src/jmh/flatbuffers")
  outputDir = file("src/jmh/generated/flatbuffers")
  language = 'java'
}

compileJava.dependsOn(createFlatBuffers)

task buildJar(type: Jar) {
  manifest {
    attributes 'Implementation-Title': 'Venice Test Common',
        'Implementation-Version': version
  }
  baseName = project.name
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
}

configurations.implementation {
  exclude group: 'org.apache.kafka'
  exclude group: 'org.mortbay.jetty', module: 'servlet-api'
}

configurations.all {
  resolutionStrategy {
    force libraries.kafka
    force libraries.javax
  }
}

jar {
  manifest {
    attributes 'Implementation-Title': 'Venice Test Common',
        'Implementation-Version': version
  }
}

sourceSets {
  integrationTest {
    java.srcDirs = ['src/integrationtest/java']
    resources.srcDirs = ['src/integrationtest/resources']
    compileClasspath += main.output
    runtimeClasspath += main.output
  }
  jmh {
    java.srcDirs = ['src/jmh/java']
    compileClasspath += main.output
    runtimeClasspath += main.output
  }
}

configurations {
  integrationTestCompile.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  jmhCompile.extendsFrom testImplementation
  jmhRuntime.extendsFrom testRuntime
}

def applyConcurrencyConfig(task) {
  String forkEveryConfigName = 'integrationTest.forkEvery'
  if (project.hasProperty(forkEveryConfigName)) {
    println "$forkEveryConfigName set to ${project.getProperty(forkEveryConfigName)}"
    task.forkEvery = Integer.parseInt(project.getProperty(forkEveryConfigName))
  } else {
    println "$forkEveryConfigName not set, will use the default ($task.forkEvery)."
  }

  String maxParallelForksConfigName = 'integrationTest.maxParallelForks'
  if (project.hasProperty(maxParallelForksConfigName)) {
    println "$maxParallelForksConfigName set to ${project.getProperty(maxParallelForksConfigName)}"
    task.maxParallelForks = Integer.parseInt(project.getProperty(maxParallelForksConfigName))
  } else {
    println "$maxParallelForksConfigName not set, will use the default ($task.maxParallelForks)."
  }
}

task integrationTests(type: Test) {
  mustRunAfter test
  classpath = sourceSets.integrationTest.runtimeClasspath
  testClassesDirs = project.files(sourceSets.integrationTest.output.classesDirs)
  applyConcurrencyConfig(integrationTests)
}

task flakyIntegrationTests(type: Test) {
  useTestNG() {
    includeGroups 'flaky'
  }
  mustRunAfter test
  classpath = sourceSets.integrationTest.runtimeClasspath
  testClassesDirs = project.files(sourceSets.integrationTest.output.classesDirs)
  applyConcurrencyConfig(flakyIntegrationTests)
}

dependencies {
  implementation libraries.testng

  implementation (libraries.brooklinTest) {
    exclude group: 'org.mockito' //brooklin tries to pull in Mockito 1, we depend on Mockito 2
    exclude group: 'org.apache.kafka' //brooklin tries to pull in Kafka 0.11, but we have not upgraded to that yet.
    exclude group: 'kafka' //brooklin tries to pull in Kafka 0.11, but we have not upgraded to that yet.
    exclude group: 'com.linkedin.linkedin-kafka-clients' //brooklin tries to pull in Kafka 0.11, but we have not upgraded to that yet.
  }

  implementation project(':venice-schema-common')
  implementation project(':venice-common')
  implementation project(':venice-server')
  implementation project(':venice-controller')
  implementation project(':venice-router')
  implementation project(':venice-thin-client')
  implementation project(':hadoop-to-venice-bridge')

  implementation libraries.azkaban
  implementation libraries.brooklinKafka
  implementation libraries.brooklinKafkaTransport
  implementation (libraries.d2) {
    exclude group: 'com.oracle', module: 'ojdbc14' // unused transitive dependencies, doesn't exist in repo
    // this will introduce another different mockito-all version
    exclude group: 'org.mockito', module: 'mockito-all'
  }
  implementation libraries.hadoopCommon
  implementation libraries.helix
  implementation libraries.javax
  implementation libraries.mockito
  implementation project(':venice-brooklin')
  implementation project(':venice-samza')
  implementation project(':da-vinci-client')
  implementation libraries.kafka
  implementation libraries.kafkaClients
  implementation libraries.conscrypt
  implementation libraries.kafkaClientsTest
  implementation libraries.rocksdbjni
  implementation libraries.routerApi
  implementation libraries.spark
  implementation libraries.samzaApi
  implementation libraries.avroUtilCompatibilityHelper
  implementation libraries.avroUtilFastserde
  implementation libraries.flatbufferJava
  implementation libraries.scalaLogging

  runtime libraries.commonsConfiguration
  runtime libraries.commonsLang
  runtime libraries.httpCore
  runtime libraries.httpClient

  testImplementation (libraries.mapreduceClientJobClient) {
    exclude group: 'org.apache.avro'
    exclude group: 'javax.servlet'
  }
  testImplementation project(':venice-admin-tool')

  jmhCompile 'org.openjdk.jmh:jmh-core:1.19'
  jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.19'

  task jmh(type: JavaExec, dependsOn: jmhClasses) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
    classpath += sourceSets.integrationTest.compileClasspath + sourceSets.integrationTest.runtimeClasspath
  }
}
