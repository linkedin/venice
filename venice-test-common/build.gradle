task buildJar(type: Jar) {
  manifest {
    attributes 'Implementation-Title': 'Venice Test Common',
        'Implementation-Version': version
  }
  baseName = project.name
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
}

configurations.implementation {
  exclude group: "org.apache.kafka"
  exclude group: 'org.mortbay.jetty', module: 'servlet-api'
}

configurations.all {
  resolutionStrategy {
    force libraries.kafka
    force libraries.javax
  }
}

jar {
  manifest {
    attributes 'Implementation-Title': 'Venice Test Common',
        'Implementation-Version': version
  }
}

sourceSets {
  integrationtest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file("src/integrationtest/java")
    }
    resources.srcDir file("src/integrationtest/resources")
  }
}

configurations {
  integrationtestCompile.extendsFrom testImplementation
  integrationtestRuntime.extendsFrom testRuntime
}

task integrationtest(type: Test) {
  String forkEveryConfigName = "integrationTest.forkEvery"
  if (project.hasProperty(forkEveryConfigName)) {
    println "$forkEveryConfigName set to ${project.getProperty(forkEveryConfigName)}"
    // Can help isolation of tests
    forkEvery = Integer.parseInt(project.getProperty(forkEveryConfigName))
  } else {
    println forkEveryConfigName + ' not set. Will recycle the same JVM(s).'
  }

  description = "Run integration tests for " + project.name;
  useTestNG()
  testClassesDirs = project.files(sourceSets.integrationtest.output.classesDirs)
  classpath = sourceSets.integrationtest.runtimeClasspath
  testReportDirName = "integrationtest"
  testResultsDirName = "integrationtest-result"
  jacoco {
    append = false
    destinationFile = file("$buildDir/jacoco/integrationtest.exec")
  }

  String maxParallelForksConfigName = "integrationTest.maxParallelForks"
  if (project.hasProperty(maxParallelForksConfigName)) {
    println "$maxParallelForksConfigName set to ${project.getProperty(maxParallelForksConfigName)}"
    // Can help isolation of tests
    maxParallelForks = Integer.parseInt(project.getProperty(maxParallelForksConfigName))
  } else {
    maxParallelForks = 10
    println maxParallelForksConfigName + ' not set. Will default to 10 parallel forks.'
  }

  testLogging {
    events "started", "failed", "passed", "skipped"
    exceptionFormat "full"
    showStandardStreams = false // to mute the DDS Router's noisy behavior...
  }
}

task jacocoIntegrationTestReport(type:JacocoReport) {
  dependsOn integrationtest
  executionData file("$buildDir/jacoco/integrationtest.exec")
  reports {
    xml.enabled false
    csv.enabled false
    html.destination new File("${buildDir}/jacocoIntegrationHtml")
  }
  sourceSets sourceSets.main
}

dependencies {
  implementation libraries.testng

  implementation (libraries.brooklinTest) {
    exclude group: 'org.mockito' //brooklin tries to pull in Mockito 1, we depend on Mockito 2
    exclude group: 'org.apache.kafka' //brooklin tries to pull in Kafka 0.11, but we have not upgraded to that yet.
    exclude group: 'kafka' //brooklin tries to pull in Kafka 0.11, but we have not upgraded to that yet.
    exclude group: 'com.linkedin.linkedin-kafka-clients' //brooklin tries to pull in Kafka 0.11, but we have not upgraded to that yet.
  }

  implementation project(':venice-schema-common')
  implementation project(':venice-common')
  implementation project(':venice-server')
  // implementation project(':venice-consumer').sourceSets.test.output
  implementation project(':venice-controller')
  implementation project(':venice-router')
  implementation project(':venice-thin-client')
  implementation project(':hadoop-to-venice-bridge')

  implementation libraries.azkaban
  implementation libraries.brooklinKafka
  implementation libraries.brooklinKafkaTransport
  implementation (libraries.d2) {
    exclude group: 'com.oracle', module: 'ojdbc14' // unused transitive dependencies, doesnt exist in repo
    // this will introduce another different mockito-all version
    exclude group: 'org.mockito', module: 'mockito-all'
  }
  implementation libraries.hadoopCommon
  implementation libraries.helix
  implementation libraries.javax
  implementation libraries.mockito
  implementation project(':venice-brooklin')
  implementation project(':venice-samza')
  implementation libraries.kafka
  implementation libraries.kafkaClients
  implementation libraries.kafkaTest
  implementation libraries.kafkaClientsTest
  implementation libraries.rocksdbjni
  implementation libraries.routerApi
  implementation libraries.spark
  implementation libraries.samzaApi

  runtime libraries.commonsConfiguration
  runtime libraries.commonsLang
  runtime libraries.httpCore
  runtime libraries.httpClient

  testImplementation (libraries.mapreduceClientJobClient) {
    exclude group: 'org.apache.avro'
    exclude group: 'javax.servlet'
  }
  testImplementation project(':venice-admin-tool')
}
