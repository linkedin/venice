package com.linkedin.venice.pulsar.sink;

import static org.testng.Assert.*;

import java.util.Map;
import org.testng.annotations.Test;


/**
 * Unit tests for {@link VenicePulsarSinkConfig}.
 * Mostly for the test coverage.
 * Most of the code is generated by lombok and testing it is a formality.
 */
public class VenicePulsarSinkConfigTest {
  private static VenicePulsarSinkConfig getVenicePulsarSinkConfig() {
    VenicePulsarSinkConfig config = new VenicePulsarSinkConfig();
    config.setVeniceRouterUrl("http://test-router:7777");
    config.setVeniceDiscoveryUrl("http://test-controller:5555");

    config.setKafkaSaslConfig("test-sasl");
    config.setKafkaSaslMechanism("PLAIN");
    config.setKafkaSecurityProtocol("SASL_PLAINTEXT");
    config.setStoreName("test-store");
    config.setFlushIntervalMs(5000L);
    config.setMaxNumberUnflushedRecords(100);

    return config;
  }

  @Test
  public void testGetSinkConfig() {
    VenicePulsarSinkConfig config = getVenicePulsarSinkConfig();

    Map<String, String> props = VenicePulsarSink.getConfig(config, "test-system");
    assertEquals(props.get("ssl.enabled"), "false");
    assertEquals(props.get("kafka.sasl.jaas.config"), "test-sasl");
    assertEquals(props.get("kafka.sasl.mechanism"), "PLAIN");
    assertEquals(props.get("kafka.security.protocol"), "SASL_PLAINTEXT");
    assertTrue(props.get("deployment.id").startsWith("venice-push-id-pulsar-sink_"));

    assertEquals(props.get("venice.discover.urls"), "http://test-controller:5555");
    assertEquals(props.get("venice.controller.discovery.url"), "http://test-controller:5555");
    assertEquals(props.get("venice.router.url"), "http://test-router:7777");

    assertEquals(props.get("systems.test-system.push.type"), "INCREMENTAL");
    assertEquals(props.get("systems.test-system.store"), "test-store");
    assertEquals(props.get("systems.test-system.aggregate"), "false");
  }

  @Test
  public void testSetGet() {
    VenicePulsarSinkConfig config = getVenicePulsarSinkConfig();
    config.setVeniceRouterUrl("http://test-router:7777");
    config.setVeniceDiscoveryUrl("http://test-controller:5555");

    config.setKafkaSaslConfig("test-sasl");
    config.setKafkaSaslMechanism("PLAIN");
    config.setKafkaSecurityProtocol("SASL_PLAINTEXT");
    config.setStoreName("test-store");
    config.setFlushIntervalMs(5000L);
    config.setMaxNumberUnflushedRecords(100);

    assertEquals(config.getVeniceDiscoveryUrl(), "http://test-controller:5555");
    assertEquals(config.getVeniceRouterUrl(), "http://test-router:7777");

    assertEquals(config.getKafkaSaslConfig(), "test-sasl");
    assertEquals(config.getKafkaSaslMechanism(), "PLAIN");
    assertEquals(config.getKafkaSecurityProtocol(), "SASL_PLAINTEXT");
    assertEquals(config.getStoreName(), "test-store");
    assertEquals(config.getFlushIntervalMs(), 5000L);
    assertEquals(config.getMaxNumberUnflushedRecords(), 100);

    Map<String, String> props = VenicePulsarSink.getConfig(config, "test-system");
    assertEquals(props.get("ssl.enabled"), "false");
    assertEquals(props.get("kafka.sasl.jaas.config"), "test-sasl");
    assertEquals(props.get("kafka.sasl.mechanism"), "PLAIN");
    assertEquals(props.get("kafka.security.protocol"), "SASL_PLAINTEXT");
    assertTrue(props.get("deployment.id").startsWith("venice-push-id-pulsar-sink_"));

    assertEquals(props.get("venice.discover.urls"), "http://test-controller:5555");
    assertEquals(props.get("venice.controller.discovery.url"), "http://test-controller:5555");
    assertEquals(props.get("venice.router.url"), "http://test-router:7777");

    assertEquals(props.get("systems.test-system.push.type"), "INCREMENTAL");
    assertEquals(props.get("systems.test-system.store"), "test-store");
    assertEquals(props.get("systems.test-system.aggregate"), "false");
  }

  @Test
  public void testEqualsAndHashCode() {
    VenicePulsarSinkConfig config1 = getVenicePulsarSinkConfig();
    VenicePulsarSinkConfig config2 = getVenicePulsarSinkConfig();
    assertEquals(config1, config2);
    assertEquals(config1.hashCode(), config2.hashCode());
  }

  @Test
  public void testToString() {
    VenicePulsarSinkConfig config = getVenicePulsarSinkConfig();
    assertNotNull(config.toString());
  }

}
