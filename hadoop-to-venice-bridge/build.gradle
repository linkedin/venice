dependencies {
    implementation project(':venice-common')
    implementation project(':venice-thin-client') // Needed by the Post Bulkload Analysis Job

    implementation libraries.commonsIo
    implementation libraries.kafkaClients
    implementation libraries.kafka
    implementation (libraries.avro) {
      exclude group: 'org.mortbay.jetty' // jetty 6 conflicts with spark-java used in controller api
    }
    implementation (libraries.avroMapred) {
      exclude group: 'org.mortbay.jetty'
    }

    implementation (libraries.mapreduceClientCore) {
        exclude group: 'org.apache.avro'
        exclude group: 'javax.servlet'
    }

    // gradle dependencyInsight is not showing any dependency on the slf4j-simple
    // But if this version is not forced, it causes the slf4j to fail with NoSuchMethodError
    implementation 'org.slf4j:slf4j-simple:1.6.2'

    implementation libraries.log4j
    implementation (libraries.hadoopCommon) {
      // Exclude transitive dependency
      exclude group: 'org.apache.avro'
      exclude group: 'javax.servlet'
    }
    implementation libraries.joptSimple
    implementation libraries.jdom
    implementation libraries.jacksonCore

    implementation libraries.xerces
    implementation libraries.xalan

    implementation libraries.azkaban

    testCompile project(':venice-controller')
    testCompile project(':venice-server')
    testCompile project(':venice-router')
    testCompile (libraries.mapreduceClientJobClient) {
        exclude group: 'org.apache.avro'
        exclude group: 'javax.servlet'
    }

    runtime libraries.commonsConfiguration
    runtime libraries.commonsLang
    runtime libraries.httpCore
    runtime libraries.httpClient

    testCompile project(':venice-brooklin')

    // The log4j2 dependencies are not required when running the test suite in Gradle,
    // but seem necessary when running in IntelliJ... No idea why, but it doesn't hurt
    // us to declare it explicitly here, so why not.
    testImplementation libraries.log4j2api
    testImplementation libraries.log4j2core
}

configurations {
    jarRuntime {
        description = 'this configuration will include all the dependencies to generate the fat jar'
        extendsFrom runtime
    }
    // filtering all the container related classes since they could conflict with customers' job dependencies
    jarRuntime.exclude group: 'com.linkedin.container'
}

configurations.all {
  resolutionStrategy {
    // Kafka expects 1.6.2 dependency, but via avro it ends up with 1.5 version which has an API that kafka uses removed.
    // Dependency tree does not show dependency on slf4j-simple 1.5, but slf4j is looking at the jar contents
    // and arrives at the conclusion that it needs 1.5
    // https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html#org.gradle.api.artifacts.ResolutionStrategy:force(java.lang.Object[])

    force 'org.slf4j:slf4j-log4j12:1.6.2'
  }
}

jar {
  // including all jar runtime dependency jars (fat jar)
  // from configurations.jarRuntime.collect {
  from configurations.jarRuntime
  // from configurations.implementation
      .filter {!it.absolutePath.endsWith(".xml")}
      .filter {!it.absolutePath.endsWith(".ivy")} // Exclude the ivy file which is introduced by new helix version.
      .collect {
        // filtering hadoop core jars and configs as it clashes with Azkaban
        it.isDirectory() ? it : zipTree(it).matching {
          // exclude("**/*-default.xml")
          // exclude("**/*.xml")
          exclude("**/org/apache/commons/**")
          exclude("**/org/apache/hadoop/**")
          exclude("**/com/linkedin/azkaban**")
          exclude("**/com/linkedin/hadoop**")
          exclude("**/org/apache/xerces/**")
          // exclude("*.xml")
          // exclude("hdfs*.xml")
          // exclude("mapred*.xml")
          // exclude("core*.xml")
          exclude("**/org.apache.hadoop*")
        }
      }
  // override log4j properties for hadoop job
  from "log4j.properties"
  exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

task fatJar(type: Jar) {
  classifier 'fatJar'

  zip64 true
  // including all jar runtime dependency jars (fat jar)
  from configurations.runtimeClasspath
      .filter {!it.absolutePath.endsWith(".xml")}
      .filter {!it.absolutePath.endsWith(".ivy")} // Exclude the ivy file which is introduced by new helix version.
      .collect {
        // filtering hadoop core jars and configs as it clashes with Azkaban
        it.isDirectory() ? it : zipTree(it).matching {
          exclude("**/org/apache/commons/**")
          exclude("**/org/apache/hadoop/**")
          exclude("**/com/linkedin/azkaban**")
          exclude("**/com/linkedin/hadoop**")
          exclude("**/org/apache/xerces/**")
          exclude("**/org.apache.hadoop*")
        }
      }

  // override log4j properties for hadoop job
  from "log4j.properties"
  exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'

  dependsOn ':venice-common:jar'
  dependsOn ':venice-thin-client:jar'
  dependsOn ':venice-schema-common:jar'
  with jar
}

artifacts {
  archives fatJar
}

task zipAzkabanDev(type: Zip, dependsOn: jar) {
  classifier = 'azkaban-dev'

  from "azkaban-dev-pack/"
  include '*'

  from (tasks.jar.archivePath) {
    into 'libs'
  }
}

