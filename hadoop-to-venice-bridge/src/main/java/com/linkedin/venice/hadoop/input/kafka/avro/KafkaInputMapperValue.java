/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.venice.hadoop.input.kafka.avro;

@SuppressWarnings("all")
/** The data protocol between Mapper and Reducer for KafkaInputFormat */
public class KafkaInputMapperValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"KafkaInputMapperValue\",\"namespace\":\"com.linkedin.venice.hadoop.input.kafka.avro\",\"fields\":[{\"name\":\"valueType\",\"type\":{\"type\":\"enum\",\"name\":\"MapperValueType\",\"symbols\":[\"PUT\",\"DELETE\"]},\"doc\":\"The value type of the message\"},{\"name\":\"value\",\"type\":\"bytes\",\"doc\":\"The raw value bytes\"},{\"name\":\"offset\",\"type\":\"long\",\"doc\":\"The offset of the record in the original Kafka topic partition\"},{\"name\":\"schemaId\",\"type\":\"int\",\"doc\":\"The schema id of the original record\"}]}");
  /** The value type of the message */
  public com.linkedin.venice.hadoop.input.kafka.avro.MapperValueType valueType;
  /** The raw value bytes */
  public java.nio.ByteBuffer value;
  /** The offset of the record in the original Kafka topic partition */
  public long offset;
  /** The schema id of the original record */
  public int schemaId;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return valueType;
    case 1: return value;
    case 2: return offset;
    case 3: return schemaId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: valueType = (com.linkedin.venice.hadoop.input.kafka.avro.MapperValueType)value$; break;
    case 1: value = (java.nio.ByteBuffer)value$; break;
    case 2: offset = (java.lang.Long)value$; break;
    case 3: schemaId = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
}
