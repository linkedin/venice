/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.venice.storage.protocol;

@SuppressWarnings("all")
/** This record maintains chunking information in order to re-assemble a value value that was split in many chunks. The version of this schema is intentionally set to -1 because this is what will be used in the schema part of the value field, representing a special system-type schema, as opposed to a user-defined schema. */
public class ChunkedValueManifest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"ChunkedValueManifest\",\"namespace\":\"com.linkedin.venice.storage.protocol\",\"fields\":[{\"name\":\"keysWithChunkIdSuffix\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"},\"doc\":\"list of keys associated to all chunks. These are encoded with key + ChunkedKeySuffix appended at the end.\"},{\"name\":\"schemaId\",\"type\":\"int\",\"doc\":\"An identifier used to determine how the full value (after chunk re-assembly) can be deserialized. This is the ID of the user-defined schema.\"},{\"name\":\"size\",\"type\":\"int\",\"doc\":\"The number of bytes of the entire value, once all chunks are assembled.\"}]}");
  /** list of keys associated to all chunks. These are encoded with key + ChunkedKeySuffix appended at the end. */
  public java.util.List<java.nio.ByteBuffer> keysWithChunkIdSuffix;
  /** An identifier used to determine how the full value (after chunk re-assembly) can be deserialized. This is the ID of the user-defined schema. */
  public int schemaId;
  /** The number of bytes of the entire value, once all chunks are assembled. */
  public int size;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return keysWithChunkIdSuffix;
    case 1: return schemaId;
    case 2: return size;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: keysWithChunkIdSuffix = (java.util.List<java.nio.ByteBuffer>)value$; break;
    case 1: schemaId = (java.lang.Integer)value$; break;
    case 2: size = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
}
