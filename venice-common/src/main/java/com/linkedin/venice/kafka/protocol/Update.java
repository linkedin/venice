/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.venice.kafka.protocol;

@SuppressWarnings("all")
/** Partial put / compute put / update existing k-v pairs */
public class Update extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"Update\",\"namespace\":\"com.linkedin.venice.kafka.protocol\",\"fields\":[{\"name\":\"schemaId\",\"type\":\"int\",\"doc\":\"The original schema ID.\"},{\"name\":\"updateSchemaId\",\"type\":\"int\",\"doc\":\"The derived schema ID that will be used to deserialize updateValue.\"},{\"name\":\"updateValue\",\"type\":\"bytes\",\"doc\":\"New value(s) for parts of the record that need to be updated.\"}]}");
  /** The original schema ID. */
  public int schemaId;
  /** The derived schema ID that will be used to deserialize updateValue. */
  public int updateSchemaId;
  /** New value(s) for parts of the record that need to be updated. */
  public java.nio.ByteBuffer updateValue;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return schemaId;
    case 1: return updateSchemaId;
    case 2: return updateValue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: schemaId = (java.lang.Integer)value$; break;
    case 1: updateSchemaId = (java.lang.Integer)value$; break;
    case 2: updateValue = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
}
