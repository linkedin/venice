/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.venice.systemstore.schemas;

@SuppressWarnings("all")
/** Type describes all the version attributes */
public class StoreVersionState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"StoreVersionState\",\"namespace\":\"com.linkedin.venice.systemstore.schemas\",\"fields\":[{\"name\":\"storeName\",\"type\":\"string\"},{\"name\":\"number\",\"type\":\"int\"},{\"name\":\"createdTime\",\"type\":\"long\"},{\"name\":\"status\",\"type\":\"int\",\"doc\":\"Default is 'STARTED'\",\"default\":1},{\"name\":\"pushJobId\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"compressionStrategy\",\"type\":\"int\",\"doc\":\"Default is 'NO_OP'\",\"default\":0},{\"name\":\"leaderFollowerModelEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"nativeReplicationEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"pushStreamSourceAddress\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"bufferReplayEnabledForHybrid\",\"type\":\"boolean\",\"default\":true},{\"name\":\"chunkingEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"pushType\",\"type\":\"int\",\"doc\":\"Default is 'BATCH'\",\"default\":0},{\"name\":\"partitionCount\",\"type\":\"int\",\"default\":0},{\"name\":\"partitionerConfig\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PartitionerConfig\",\"fields\":[{\"name\":\"partitionerClass\",\"type\":\"string\"},{\"name\":\"partitionerParams\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"amplificationFactor\",\"type\":\"int\"}]}],\"default\":null},{\"name\":\"incrementalPushPolicy\",\"type\":\"int\",\"doc\":\"Default is 'PUSH_TO_VERSION_TOPIC'\",\"default\":0},{\"name\":\"replicationFactor\",\"type\":\"int\",\"default\":3},{\"name\":\"nativeReplicationSourceFabric\",\"type\":\"string\",\"default\":\"\"}]}");
  public java.lang.CharSequence storeName;
  public int number;
  public long createdTime;
  /** Default is 'STARTED' */
  public int status;
  public java.lang.CharSequence pushJobId;
  /** Default is 'NO_OP' */
  public int compressionStrategy;
  public boolean leaderFollowerModelEnabled;
  public boolean nativeReplicationEnabled;
  public java.lang.CharSequence pushStreamSourceAddress;
  public boolean bufferReplayEnabledForHybrid;
  public boolean chunkingEnabled;
  /** Default is 'BATCH' */
  public int pushType;
  public int partitionCount;
  public com.linkedin.venice.systemstore.schemas.PartitionerConfig partitionerConfig;
  /** Default is 'PUSH_TO_VERSION_TOPIC' */
  public int incrementalPushPolicy;
  public int replicationFactor;
  public java.lang.CharSequence nativeReplicationSourceFabric;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return storeName;
    case 1: return number;
    case 2: return createdTime;
    case 3: return status;
    case 4: return pushJobId;
    case 5: return compressionStrategy;
    case 6: return leaderFollowerModelEnabled;
    case 7: return nativeReplicationEnabled;
    case 8: return pushStreamSourceAddress;
    case 9: return bufferReplayEnabledForHybrid;
    case 10: return chunkingEnabled;
    case 11: return pushType;
    case 12: return partitionCount;
    case 13: return partitionerConfig;
    case 14: return incrementalPushPolicy;
    case 15: return replicationFactor;
    case 16: return nativeReplicationSourceFabric;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: storeName = (java.lang.CharSequence)value$; break;
    case 1: number = (java.lang.Integer)value$; break;
    case 2: createdTime = (java.lang.Long)value$; break;
    case 3: status = (java.lang.Integer)value$; break;
    case 4: pushJobId = (java.lang.CharSequence)value$; break;
    case 5: compressionStrategy = (java.lang.Integer)value$; break;
    case 6: leaderFollowerModelEnabled = (java.lang.Boolean)value$; break;
    case 7: nativeReplicationEnabled = (java.lang.Boolean)value$; break;
    case 8: pushStreamSourceAddress = (java.lang.CharSequence)value$; break;
    case 9: bufferReplayEnabledForHybrid = (java.lang.Boolean)value$; break;
    case 10: chunkingEnabled = (java.lang.Boolean)value$; break;
    case 11: pushType = (java.lang.Integer)value$; break;
    case 12: partitionCount = (java.lang.Integer)value$; break;
    case 13: partitionerConfig = (com.linkedin.venice.systemstore.schemas.PartitionerConfig)value$; break;
    case 14: incrementalPushPolicy = (java.lang.Integer)value$; break;
    case 15: replicationFactor = (java.lang.Integer)value$; break;
    case 16: nativeReplicationSourceFabric = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
}
