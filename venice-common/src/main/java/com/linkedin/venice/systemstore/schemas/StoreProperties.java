/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.venice.systemstore.schemas;

@SuppressWarnings("all")
/** This type contains all the store configs and the corresponding versions */
public class StoreProperties extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"StoreProperties\",\"namespace\":\"com.linkedin.venice.systemstore.schemas\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"string\"},{\"name\":\"createdTime\",\"type\":\"long\"},{\"name\":\"currentVersion\",\"type\":\"int\",\"default\":0},{\"name\":\"partitionCount\",\"type\":\"int\",\"default\":0},{\"name\":\"enableWrites\",\"type\":\"boolean\",\"default\":true},{\"name\":\"enableReads\",\"type\":\"boolean\",\"default\":true},{\"name\":\"storageQuotaInByte\",\"type\":\"long\",\"doc\":\"Default is 20GB\",\"default\":21474836480},{\"name\":\"persistenceType\",\"type\":\"int\",\"doc\":\"Default is 'ROCKS_DB'\",\"default\":2},{\"name\":\"routingStrategy\",\"type\":\"int\",\"doc\":\"Default is 'CONSISTENT_HASH'\",\"default\":0},{\"name\":\"readStrategy\",\"type\":\"int\",\"doc\":\"Default is 'ANY_OF_ONLINE'\",\"default\":0},{\"name\":\"offlinePushStrategy\",\"type\":\"int\",\"doc\":\"Default is 'WAIT_N_MINUS_ONE_REPLCIA_PER_PARTITION'\",\"default\":1},{\"name\":\"largestUsedVersionNumber\",\"type\":\"int\",\"default\":0},{\"name\":\"readQuotaInCU\",\"type\":\"long\",\"default\":0},{\"name\":\"hybridStoreConfig\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"HybridStoreConfig\",\"fields\":[{\"name\":\"rewindTimeInSeconds\",\"type\":\"long\",\"doc\":\"\"},{\"name\":\"offsetLagThresholdToGoOnline\",\"type\":\"long\",\"doc\":\"\"},{\"name\":\"producerTimestampLagThresholdToGoOnlineInSeconds\",\"type\":\"long\",\"doc\":\"\"}]}],\"default\":null},{\"name\":\"accessControlled\",\"type\":\"boolean\",\"default\":true},{\"name\":\"compressionStrategy\",\"type\":\"int\",\"doc\":\"Default is 'NO_OP'\",\"default\":0},{\"name\":\"clientDecompressionEnabled\",\"type\":\"boolean\",\"default\":true},{\"name\":\"chunkingEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"batchGetLimit\",\"type\":\"int\",\"default\":-1},{\"name\":\"numVersionsToPreserve\",\"type\":\"int\",\"default\":0},{\"name\":\"incrementalPushEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"migrating\",\"type\":\"boolean\",\"default\":false},{\"name\":\"writeComputationEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"readComputationEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"bootstrapToOnlineTimeoutInHours\",\"type\":\"int\",\"default\":24},{\"name\":\"leaderFollowerModelEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"nativeReplicationEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"pushStreamSourceAddress\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"backupStrategy\",\"type\":\"int\",\"doc\":\"Default is 'DELETE_ON_NEW_PUSH_START'\",\"default\":1},{\"name\":\"schemaAutoRegisteFromPushJobEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"latestSuperSetValueSchemaId\",\"type\":\"int\",\"default\":-1},{\"name\":\"hybridStoreDiskQuotaEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"storeMetadataSystemStoreEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"etlStoreConfig\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ETLStoreConfig\",\"fields\":[{\"name\":\"etledUserProxyAccount\",\"type\":\"string\"},{\"name\":\"regularVersionETLEnabled\",\"type\":\"boolean\"},{\"name\":\"futureVersionETLEnabled\",\"type\":\"boolean\"}]}],\"default\":null},{\"name\":\"partitionerConfig\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PartitionerConfig\",\"fields\":[{\"name\":\"partitionerClass\",\"type\":\"string\"},{\"name\":\"partitionerParams\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"amplificationFactor\",\"type\":\"int\"}]}],\"default\":null},{\"name\":\"incrementalPushPolicy\",\"type\":\"int\",\"doc\":\"Default is 'PUSH_TO_VERSION_TOPIC'\",\"default\":0},{\"name\":\"latestVersionPromoteToCurrentTimestamp\",\"type\":\"long\",\"default\":-1},{\"name\":\"backupVersionRetentionMs\",\"type\":\"long\",\"default\":-1},{\"name\":\"defaultRTRetentionTime\",\"type\":\"long\",\"doc\":\"Default is '5 days'\",\"default\":432000000},{\"name\":\"replicationFactor\",\"type\":\"int\",\"default\":3},{\"name\":\"migrationDuplicateStore\",\"type\":\"boolean\",\"default\":false},{\"name\":\"nativeReplicationSourceFabric\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"versions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"StoreVersionState\",\"fields\":[{\"name\":\"storeName\",\"type\":\"string\"},{\"name\":\"number\",\"type\":\"int\"},{\"name\":\"createdTime\",\"type\":\"long\"},{\"name\":\"status\",\"type\":\"int\",\"doc\":\"Default is 'STARTED'\",\"default\":1},{\"name\":\"pushJobId\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"compressionStrategy\",\"type\":\"int\",\"doc\":\"Default is 'NO_OP'\",\"default\":0},{\"name\":\"leaderFollowerModelEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"nativeReplicationEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"pushStreamSourceAddress\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"bufferReplayEnabledForHybrid\",\"type\":\"boolean\",\"default\":true},{\"name\":\"chunkingEnabled\",\"type\":\"boolean\",\"default\":false},{\"name\":\"pushType\",\"type\":\"int\",\"doc\":\"Default is 'BATCH'\",\"default\":0},{\"name\":\"partitionCount\",\"type\":\"int\",\"default\":0},{\"name\":\"partitionerConfig\",\"type\":[\"null\",\"PartitionerConfig\"],\"default\":null},{\"name\":\"incrementalPushPolicy\",\"type\":\"int\",\"doc\":\"Default is 'PUSH_TO_VERSION_TOPIC'\",\"default\":0},{\"name\":\"replicationFactor\",\"type\":\"int\",\"default\":3},{\"name\":\"nativeReplicationSourceFabric\",\"type\":\"string\",\"default\":\"\"}]}},\"doc\":\"\",\"default\":[]},{\"name\":\"systemStores\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"SystemStoreProperties\",\"fields\":[{\"name\":\"largestUsedVersionNumber\",\"type\":\"int\",\"default\":0},{\"name\":\"currentVersion\",\"type\":\"int\",\"default\":0},{\"name\":\"versions\",\"type\":{\"type\":\"array\",\"items\":\"StoreVersionState\"},\"default\":[]}]}},\"doc\":\"This field is used to maintain a mapping between each type of system store and the corresponding distinct properties\",\"default\":{}}]}");
  public java.lang.CharSequence name;
  public java.lang.CharSequence owner;
  public long createdTime;
  public int currentVersion;
  public int partitionCount;
  public boolean enableWrites;
  public boolean enableReads;
  /** Default is 20GB */
  public long storageQuotaInByte;
  /** Default is 'ROCKS_DB' */
  public int persistenceType;
  /** Default is 'CONSISTENT_HASH' */
  public int routingStrategy;
  /** Default is 'ANY_OF_ONLINE' */
  public int readStrategy;
  /** Default is 'WAIT_N_MINUS_ONE_REPLCIA_PER_PARTITION' */
  public int offlinePushStrategy;
  public int largestUsedVersionNumber;
  public long readQuotaInCU;
  public com.linkedin.venice.systemstore.schemas.HybridStoreConfig hybridStoreConfig;
  public boolean accessControlled;
  /** Default is 'NO_OP' */
  public int compressionStrategy;
  public boolean clientDecompressionEnabled;
  public boolean chunkingEnabled;
  public int batchGetLimit;
  public int numVersionsToPreserve;
  public boolean incrementalPushEnabled;
  public boolean migrating;
  public boolean writeComputationEnabled;
  public boolean readComputationEnabled;
  public int bootstrapToOnlineTimeoutInHours;
  public boolean leaderFollowerModelEnabled;
  public boolean nativeReplicationEnabled;
  public java.lang.CharSequence pushStreamSourceAddress;
  /** Default is 'DELETE_ON_NEW_PUSH_START' */
  public int backupStrategy;
  public boolean schemaAutoRegisteFromPushJobEnabled;
  public int latestSuperSetValueSchemaId;
  public boolean hybridStoreDiskQuotaEnabled;
  public boolean storeMetadataSystemStoreEnabled;
  public com.linkedin.venice.systemstore.schemas.ETLStoreConfig etlStoreConfig;
  public com.linkedin.venice.systemstore.schemas.PartitionerConfig partitionerConfig;
  /** Default is 'PUSH_TO_VERSION_TOPIC' */
  public int incrementalPushPolicy;
  public long latestVersionPromoteToCurrentTimestamp;
  public long backupVersionRetentionMs;
  /** Default is '5 days' */
  public long defaultRTRetentionTime;
  public int replicationFactor;
  public boolean migrationDuplicateStore;
  public java.lang.CharSequence nativeReplicationSourceFabric;
  /**  */
  public java.util.List<com.linkedin.venice.systemstore.schemas.StoreVersionState> versions;
  /** This field is used to maintain a mapping between each type of system store and the corresponding distinct properties */
  public java.util.Map<java.lang.CharSequence,com.linkedin.venice.systemstore.schemas.SystemStoreProperties> systemStores;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return owner;
    case 2: return createdTime;
    case 3: return currentVersion;
    case 4: return partitionCount;
    case 5: return enableWrites;
    case 6: return enableReads;
    case 7: return storageQuotaInByte;
    case 8: return persistenceType;
    case 9: return routingStrategy;
    case 10: return readStrategy;
    case 11: return offlinePushStrategy;
    case 12: return largestUsedVersionNumber;
    case 13: return readQuotaInCU;
    case 14: return hybridStoreConfig;
    case 15: return accessControlled;
    case 16: return compressionStrategy;
    case 17: return clientDecompressionEnabled;
    case 18: return chunkingEnabled;
    case 19: return batchGetLimit;
    case 20: return numVersionsToPreserve;
    case 21: return incrementalPushEnabled;
    case 22: return migrating;
    case 23: return writeComputationEnabled;
    case 24: return readComputationEnabled;
    case 25: return bootstrapToOnlineTimeoutInHours;
    case 26: return leaderFollowerModelEnabled;
    case 27: return nativeReplicationEnabled;
    case 28: return pushStreamSourceAddress;
    case 29: return backupStrategy;
    case 30: return schemaAutoRegisteFromPushJobEnabled;
    case 31: return latestSuperSetValueSchemaId;
    case 32: return hybridStoreDiskQuotaEnabled;
    case 33: return storeMetadataSystemStoreEnabled;
    case 34: return etlStoreConfig;
    case 35: return partitionerConfig;
    case 36: return incrementalPushPolicy;
    case 37: return latestVersionPromoteToCurrentTimestamp;
    case 38: return backupVersionRetentionMs;
    case 39: return defaultRTRetentionTime;
    case 40: return replicationFactor;
    case 41: return migrationDuplicateStore;
    case 42: return nativeReplicationSourceFabric;
    case 43: return versions;
    case 44: return systemStores;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: owner = (java.lang.CharSequence)value$; break;
    case 2: createdTime = (java.lang.Long)value$; break;
    case 3: currentVersion = (java.lang.Integer)value$; break;
    case 4: partitionCount = (java.lang.Integer)value$; break;
    case 5: enableWrites = (java.lang.Boolean)value$; break;
    case 6: enableReads = (java.lang.Boolean)value$; break;
    case 7: storageQuotaInByte = (java.lang.Long)value$; break;
    case 8: persistenceType = (java.lang.Integer)value$; break;
    case 9: routingStrategy = (java.lang.Integer)value$; break;
    case 10: readStrategy = (java.lang.Integer)value$; break;
    case 11: offlinePushStrategy = (java.lang.Integer)value$; break;
    case 12: largestUsedVersionNumber = (java.lang.Integer)value$; break;
    case 13: readQuotaInCU = (java.lang.Long)value$; break;
    case 14: hybridStoreConfig = (com.linkedin.venice.systemstore.schemas.HybridStoreConfig)value$; break;
    case 15: accessControlled = (java.lang.Boolean)value$; break;
    case 16: compressionStrategy = (java.lang.Integer)value$; break;
    case 17: clientDecompressionEnabled = (java.lang.Boolean)value$; break;
    case 18: chunkingEnabled = (java.lang.Boolean)value$; break;
    case 19: batchGetLimit = (java.lang.Integer)value$; break;
    case 20: numVersionsToPreserve = (java.lang.Integer)value$; break;
    case 21: incrementalPushEnabled = (java.lang.Boolean)value$; break;
    case 22: migrating = (java.lang.Boolean)value$; break;
    case 23: writeComputationEnabled = (java.lang.Boolean)value$; break;
    case 24: readComputationEnabled = (java.lang.Boolean)value$; break;
    case 25: bootstrapToOnlineTimeoutInHours = (java.lang.Integer)value$; break;
    case 26: leaderFollowerModelEnabled = (java.lang.Boolean)value$; break;
    case 27: nativeReplicationEnabled = (java.lang.Boolean)value$; break;
    case 28: pushStreamSourceAddress = (java.lang.CharSequence)value$; break;
    case 29: backupStrategy = (java.lang.Integer)value$; break;
    case 30: schemaAutoRegisteFromPushJobEnabled = (java.lang.Boolean)value$; break;
    case 31: latestSuperSetValueSchemaId = (java.lang.Integer)value$; break;
    case 32: hybridStoreDiskQuotaEnabled = (java.lang.Boolean)value$; break;
    case 33: storeMetadataSystemStoreEnabled = (java.lang.Boolean)value$; break;
    case 34: etlStoreConfig = (com.linkedin.venice.systemstore.schemas.ETLStoreConfig)value$; break;
    case 35: partitionerConfig = (com.linkedin.venice.systemstore.schemas.PartitionerConfig)value$; break;
    case 36: incrementalPushPolicy = (java.lang.Integer)value$; break;
    case 37: latestVersionPromoteToCurrentTimestamp = (java.lang.Long)value$; break;
    case 38: backupVersionRetentionMs = (java.lang.Long)value$; break;
    case 39: defaultRTRetentionTime = (java.lang.Long)value$; break;
    case 40: replicationFactor = (java.lang.Integer)value$; break;
    case 41: migrationDuplicateStore = (java.lang.Boolean)value$; break;
    case 42: nativeReplicationSourceFabric = (java.lang.CharSequence)value$; break;
    case 43: versions = (java.util.List<com.linkedin.venice.systemstore.schemas.StoreVersionState>)value$; break;
    case 44: systemStores = (java.util.Map<java.lang.CharSequence,com.linkedin.venice.systemstore.schemas.SystemStoreProperties>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
}
