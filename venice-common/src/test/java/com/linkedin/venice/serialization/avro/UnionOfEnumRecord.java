/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.venice.serialization.avro;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UnionOfEnumRecord extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
      "{\"type\":\"record\",\"name\":\"UnionOfEnumRecord\",\"namespace\":\"com.linkedin.venice.serialization.avro\",\"fields\":[{\"name\":\"union\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"EnumField1\",\"symbols\":[\"A\",\"B\",\"C\"]}],\"default\":null}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  @Deprecated
  public EnumField1 union;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UnionOfEnumRecord() {
  }

  /**
   * All-args constructor.
   */
  public UnionOfEnumRecord(EnumField1 union) {
    this.union = union;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter. Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return union;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader. Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        union = (EnumField1) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'union' field.
   */
  public EnumField1 getUnion() {
    return union;
  }

  /**
   * Sets the value of the 'union' field.
   * @param value the value to set.
   */
  public void setUnion(EnumField1 value) {
    this.union = value;
  }

  /** Creates a new UnionOfEnumRecord RecordBuilder */
  public static com.linkedin.venice.serialization.avro.UnionOfEnumRecord.Builder newBuilder() {
    return new com.linkedin.venice.serialization.avro.UnionOfEnumRecord.Builder();
  }

  /** Creates a new UnionOfEnumRecord RecordBuilder by copying an existing Builder */
  public static com.linkedin.venice.serialization.avro.UnionOfEnumRecord.Builder newBuilder(
      com.linkedin.venice.serialization.avro.UnionOfEnumRecord.Builder other) {
    return new com.linkedin.venice.serialization.avro.UnionOfEnumRecord.Builder(other);
  }

  /** Creates a new UnionOfEnumRecord RecordBuilder by copying an existing UnionOfEnumRecord instance */
  public static com.linkedin.venice.serialization.avro.UnionOfEnumRecord.Builder newBuilder(
      com.linkedin.venice.serialization.avro.UnionOfEnumRecord other) {
    return new com.linkedin.venice.serialization.avro.UnionOfEnumRecord.Builder(other);
  }

  /**
   * RecordBuilder for UnionOfEnumRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UnionOfEnumRecord>
      implements org.apache.avro.data.RecordBuilder<UnionOfEnumRecord> {
    private EnumField1 union;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.venice.serialization.avro.UnionOfEnumRecord.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.venice.serialization.avro.UnionOfEnumRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.union)) {
        this.union = data().deepCopy(fields()[0].schema(), other.union);
        fieldSetFlags()[0] = true;
      }
    }

    /** Creates a Builder by copying an existing UnionOfEnumRecord instance */
    private Builder(com.linkedin.venice.serialization.avro.UnionOfEnumRecord other) {
      super(com.linkedin.venice.serialization.avro.UnionOfEnumRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.union)) {
        this.union = data().deepCopy(fields()[0].schema(), other.union);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'union' field */
    public EnumField1 getUnion() {
      return union;
    }

    /** Sets the value of the 'union' field */
    public com.linkedin.venice.serialization.avro.UnionOfEnumRecord.Builder setUnion(EnumField1 value) {
      validate(fields()[0], value);
      this.union = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'union' field has been set */
    public boolean hasUnion() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'union' field */
    public com.linkedin.venice.serialization.avro.UnionOfEnumRecord.Builder clearUnion() {
      union = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public UnionOfEnumRecord build() {
      try {
        UnionOfEnumRecord record = new UnionOfEnumRecord();
        record.union = fieldSetFlags()[0] ? this.union : (EnumField1) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
