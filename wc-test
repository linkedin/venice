#!/usr/bin/env python3

import os
import re
import json
import time
import random
import argparse
import textwrap
import subprocess

CI_CONFIG = ".ciconfig"

def get_config(name):
  path = name if os.path.isfile(name) else os.path.expanduser(os.path.join('~', name))
  with open(path) as file:
    config = json.load(file)
    return config

def run_command(command):
  status, output = subprocess.getstatusoutput(command)
  if status:
    raise SystemExit(output)
  return output

def get_queued_build(build_url, params):
  while True:
    response = run_command("curl -kfs '{0}api/json' -u $(whoami):{apiToken}"
      .format(build_url, **params))
    build = json.loads(response)
    if ("executable" in build) or build["blocked"] or build["buildable"]:
      return build
    time.sleep(1)

if __name__ == "__main__":
  parser = argparse.ArgumentParser(
    formatter_class=argparse.RawTextHelpFormatter,
    description=textwrap.dedent(
      """
      Run tests on Jenkins with current working copy changes.

      Please follow instructions from the link below to generate an API token:
      https://jenkins.io/doc/book/system-administration/authenticating-scripted-clients

      Example ~/{config}:
        {{
          \"url\": \"https://venice-ci.stg.linkedin.com:8443\",
          \"apiToken\": \"**********************************\"
        }}
      """.format(config=CI_CONFIG)))

  parser.add_argument("patch", nargs='?', help="Patch file to submit for testing.")
  args = parser.parse_args()

  params = dict(job="Venice-WcTest")
  params.update(get_config(CI_CONFIG))
  if isinstance(params["url"], list):
    params["url"] = random.choice(params["url"])

  if args.patch:
    response = run_command(
      "curl -kfv '{url}/job/{job}/buildWithParameters' -u $(whoami):{apiToken} -F 'patch.diff=@{patch}'"
        .format(**params, patch=args.patch))
  else:
    changes = run_command("git diff --patch --compact-summary origin/master")
    if not changes:
      raise SystemExit("No changes")

    revision = '#' + run_command("git rev-parse --short HEAD")
    response = run_command(
        "curl -kfv '{url}/job/{job}/buildWithParameters' -u $(whoami):{apiToken} -F 'patch.diff=@-;filename={name}' <<'\003'\n{changes}\n\003"
          .format(**params, changes=changes, name=revision))

    print("Submitted working copy {name} for testing:".format(name=revision))
    print(run_command("git diff --compact-summary origin/master"))
    print()

  build_url = re.findall("< Location: (https?://.+)", response)[0]
  build = get_queued_build(build_url, params)
  if build.get("cancelled"):
    print("Build cancelled")
  elif build["blocked"] or build["buildable"]:
    print(build["task"]["url"])
  else:
    print(build["executable"]["url"])
