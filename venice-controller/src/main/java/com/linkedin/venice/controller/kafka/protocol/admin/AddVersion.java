/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.venice.controller.kafka.protocol.admin;

@SuppressWarnings("all")
public class AddVersion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AddVersion\",\"namespace\":\"com.linkedin.venice.controller.kafka.protocol.admin\",\"fields\":[{\"name\":\"clusterName\",\"type\":\"string\"},{\"name\":\"storeName\",\"type\":\"string\"},{\"name\":\"pushJobId\",\"type\":\"string\"},{\"name\":\"versionNum\",\"type\":\"int\"},{\"name\":\"numberOfPartitions\",\"type\":\"int\"},{\"name\":\"pushType\",\"type\":\"int\",\"doc\":\"The push type of the new version, 0 => BATCH, 1 => STREAM_REPROCESSING. Previous add version messages will default to BATCH and this is a safe because they were created when BATCH was the only version type\",\"default\":0},{\"name\":\"pushStreamSourceAddress\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"rewindTimeInSecondsOverride\",\"type\":\"long\",\"doc\":\"The overridable rewind time config for this specific version of a hybrid store, and if it is not specified, the new version will use the store-level rewind time config\",\"default\":-1},{\"name\":\"timestampMetadataVersionId\",\"type\":\"int\",\"doc\":\"The A/A metadata schema version ID that will be used to deserialize metadataPayload.\",\"default\":-1}]}");
  public java.lang.CharSequence clusterName;
  public java.lang.CharSequence storeName;
  public java.lang.CharSequence pushJobId;
  public int versionNum;
  public int numberOfPartitions;
  /** The push type of the new version, 0 => BATCH, 1 => STREAM_REPROCESSING. Previous add version messages will default to BATCH and this is a safe because they were created when BATCH was the only version type */
  public int pushType;
  public java.lang.CharSequence pushStreamSourceAddress;
  /** The overridable rewind time config for this specific version of a hybrid store, and if it is not specified, the new version will use the store-level rewind time config */
  public long rewindTimeInSecondsOverride;
  /** The A/A metadata schema version ID that will be used to deserialize metadataPayload. */
  public int timestampMetadataVersionId;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clusterName;
    case 1: return storeName;
    case 2: return pushJobId;
    case 3: return versionNum;
    case 4: return numberOfPartitions;
    case 5: return pushType;
    case 6: return pushStreamSourceAddress;
    case 7: return rewindTimeInSecondsOverride;
    case 8: return timestampMetadataVersionId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clusterName = (java.lang.CharSequence)value$; break;
    case 1: storeName = (java.lang.CharSequence)value$; break;
    case 2: pushJobId = (java.lang.CharSequence)value$; break;
    case 3: versionNum = (java.lang.Integer)value$; break;
    case 4: numberOfPartitions = (java.lang.Integer)value$; break;
    case 5: pushType = (java.lang.Integer)value$; break;
    case 6: pushStreamSourceAddress = (java.lang.CharSequence)value$; break;
    case 7: rewindTimeInSecondsOverride = (java.lang.Long)value$; break;
    case 8: timestampMetadataVersionId = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
}
