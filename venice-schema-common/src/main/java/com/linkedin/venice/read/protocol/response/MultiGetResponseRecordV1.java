/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.venice.read.protocol.response;

@SuppressWarnings("all")
/** This field will store all the related info for one record */
public class MultiGetResponseRecordV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"MultiGetResponseRecordV1\",\"namespace\":\"com.linkedin.venice.read.protocol.response\",\"fields\":[{\"name\":\"keyIndex\",\"type\":\"int\",\"doc\":\"The corresponding key index for each record. Venice Client/Router is maintaining a mapping between a unique index and the corresponding key, so that Venice backend doesn't need to return the full key bytes to reduce network overhead\"},{\"name\":\"value\",\"type\":\"bytes\",\"doc\":\"Avro serialized value\"},{\"name\":\"schemaId\",\"type\":\"int\",\"doc\":\"Schema id of current store being used when serializing this record\"}]}");
  /** The corresponding key index for each record. Venice Client/Router is maintaining a mapping between a unique index and the corresponding key, so that Venice backend doesn't need to return the full key bytes to reduce network overhead */
  public int keyIndex;
  /** Avro serialized value */
  public java.nio.ByteBuffer value;
  /** Schema id of current store being used when serializing this record */
  public int schemaId;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return keyIndex;
    case 1: return value;
    case 2: return schemaId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: keyIndex = (java.lang.Integer)value$; break;
    case 1: value = (java.nio.ByteBuffer)value$; break;
    case 2: schemaId = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
}
