// The start parameters below enable parallelization of many independent modules.
// We can't enable it by default because it breaks buildAll. We can still use
// parallel execution by doing: `./gradlew clean build --parallel`
// gradle.startParameter.setParallelProjectExecutionEnabled(true)
// gradle.startParameter.setMaxWorkerCount(10)

if (project.hasProperty('overrideBuildEnvironment')) {
  if(project.overrideBuildEnvironment) {
    apply from: file(project.overrideBuildEnvironment)
    product {
      codeQuality {
        ignoreFailures = true
      }
    }
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

ext.libraries = [ // Groovy map literal
                  avro: 'org.apache.avro:avro:1.4.1',
                  bdbJe: 'com.sleepycat:je:5.0.104',
                  commonsCodec: 'commons-codec:commons-codec:1.4',
                  commonsIo: 'commons-io:commons-io:2.4',
                  guava: 'com.google.guava:guava:18.0',
                  helix: 'org.apache.helix:helix-core:0.6.5.59',
                  kafka: 'kafka:kafka_2.10:0.9.0.2', // Internal LinkedIn release
                  kafkaClients: 'kafka:kafka-clients:0.9.0.2', // Internal LinkedIn release
                  netty: 'io.netty:netty-all:4.1.4.Final',
                  netty3: 'io.netty:netty:3.9.7.Final',
                  zkclient: 'com.101tec:zkclient:0.7', //for Kafka AdminUtils
                  d2: 'com.linkedin.container:pegasus-d2-server-factory:25.0.11',
                  d2Client: 'com.linkedin.container:pegasus-d2-client-factory:25.0.11',

                  routerApi: 'com.linkedin.dds-storage-core:dds-storage-router-api:0.0.60',
                  routerImpl: 'com.linkedin.dds-storage-core:dds-storage-router-impl:0.0.60',
                  asyncHttpClient: 'org.apache.httpcomponents:httpasyncclient:4.1.1',
                  zookeeper: 'org.apache.zookeeper:zookeeper:3.4.6',

                  // Hadoop to Venice Bridge dependencies
                  mapreduceClientCore: 'org.apache.hadoop:hadoop-mapreduce-client-core:2.3.0',
                  commonsConfiguration: 'commons-configuration:commons-configuration:1.9',
                  commonsLang: 'commons-lang:commons-lang:2.6',
                  hadoopCommon: 'org.apache.hadoop:hadoop-common:2.3.0',
                  httpClient: 'org.apache.httpcomponents:httpclient:4.2.1',
                  httpCore: 'org.apache.httpcomponents:httpcore:4.2.1',
                  jacksonCore: 'org.codehaus.jackson:jackson-core-asl:1.8.5',
                  jacksonMapper: 'org.codehaus.jackson:jackson-mapper-asl:1.8.5',
                  jdom: 'org.jdom:jdom:1.1',
                  joptSimple: 'net.sf.jopt-simple:jopt-simple:3.2',
                  log4j: 'log4j:log4j:1.2.17',
                  metricsCore: 'com.yammer.metrics:metrics-core:2.2.1',
                  snappy: 'org.xerial.snappy:snappy-java:1.0.4.1',
                  testng: 'org.testng:testng:6.1.1',
                  tehuti: 'com.linkedin.tehuti:tehuti:0.7.0.6',
                  // Resolves java.lang.UnsupportedOperationException:  setXIncludeAware is not supported on this JAXP implementation or earlier: class org.apache.xerces.jaxp.DocumentBuilderFactoryImpl
                  xalan: 'xalan:xalan:2.7.1',
                  xerces: 'xerces:xercesImpl:2.9.1',

                  // Hadoop to Venice Bridge test dependencies
                  mapreduceClientJobClient: 'org.apache.hadoop:hadoop-mapreduce-client-jobclient:2.3.0'
]

subprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'jacoco'

  sourceCompatibility = 1.8
  if (!project.hasProperty('overrideBuildEnvironment') ||
     !project.overrideBuildEnvironment) {
     version = '0.1'
  }
  repositories {
    mavenCentral()
    maven {
      url "http://download.oracle.com/maven/"
    }
    ivy {  //TODO: remove this before opensourcing
      url 'http://artifactory.corp.linkedin.com:8081/artifactory/release/'
      layout "pattern", {
        ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
        artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
        m2compatible = true
      }
    }
  }

  dependencies {
    compile 'org.slf4j:slf4j-log4j12:1.7.14'
    compile 'javax.validation:validation-api:1.0.0.GA'
    testCompile 'org.testng:testng:6.1.1'

    testCompile 'org.mockito:mockito-all:1.9.5'
  }

  idea {
    module {
      downloadJavadoc = true
      downloadSources = true
    }
  }

  test {
    useTestNG()

    // Tests should run in parallel (this controls the number of parallel tests within a single module)
    maxParallelForks 10
  }

  jacoco {
    toolVersion = "0.7.6.201602180812"
  }

  jacocoTestReport {
    dependsOn test
    reports {
      xml.enabled false
      csv.enabled false
      html.destination "${buildDir}/jacocoHtml"
    }
  }

  build.dependsOn jacocoTestReport

  // Add Logging on what is running and passed, Sometimes the test hangs
  // and is not possible to debug what is going on.
  // uncomment to enable - bloats log output if we don't need it.
/*
  tasks.withType(Test) {
    testLogging {
      events "started", "passed", "skipped", "failed"
      exceptionFormat = 'full'
    }
  }
*/
  sourceSets {
    integrationtest {
      java {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        srcDir file("src/integrationtest/java")
      }
      resources.srcDir file("src/integrationtest/resources")
    }
  }

  configurations {
    integrationtestCompile.extendsFrom testCompile
    integrationtestRuntime.extendsFrom testRuntime

  }

  task integrationtest(type: Test) {
    description = "Run integration tests for " + project.name;
    useTestNG()
    testClassesDir = sourceSets.integrationtest.output.classesDir
    classpath = sourceSets.integrationtest.runtimeClasspath
    testReportDirName = "integrationtest"
    testResultsDirName = "integrationtest-result"
    jacoco {
      append = false
      destinationFile = file("$buildDir/jacoco/integrationtest.exec")
    }
  }

  task jacocoIntegrationTestReport(type:JacocoReport){
    dependsOn integrationtest
    executionData file("$buildDir/jacoco/integrationtest.exec")
    reports {
      xml.enabled false
      csv.enabled false
      html.destination "${buildDir}/jacocoIntegrationHtml"
    }
    sourceSets sourceSets.main
  }
}

task buildAll {
  dependsOn 'venice-common:build'
  dependsOn 'venice-thin-client:build'
  dependsOn 'venice-thin-client:test'
  dependsOn 'venice-server:build'
  dependsOn 'venice-controller:build'
  dependsOn 'venice-router:build'
  dependsOn 'hadoop-to-venice-bridge:build'
  dependsOn 'venice-schema-common:build'

  dependsOn 'venice-common:buildJar'
  dependsOn 'venice-server:installApp'
  dependsOn 'venice-controller:installApp'
  dependsOn 'venice-router:installApp'
  // dependsOn 'hadoop-to-venice-bridge:installApp'
  dependsOn 'venice-admin-tool:build'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}
